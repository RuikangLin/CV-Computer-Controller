#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
#include <stdio.h>

void overlay_text(cv::Mat img, std::string text) {
    int font_face = cv::FONT_HERSHEY_SIMPLEX;
    double font_scale = 1;
    cv::Scalar color(0, 255, 0);

    cv::putText(img, text, cv::Point(50, 50), font_face, font_scale, color, 1, cv::LINE_AA);
}

int main(int, char**)
{
    cv::Mat frame;
    cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
    //--- INITIALIZE VIDEOCAPTURE
    cv::VideoCapture cap;
    // open the default camera using default API
    // cap.open(0);
    // OR advance usage: select any API backend
    int deviceID = 0;             // 0 = open default camera
    int apiID = cv::CAP_ANY;      // 0 = autodetect default API
    // open selected camera using selected API
    cap.open(deviceID, apiID);
    // check if we succeeded
    if (!cap.isOpened()) {
        std::cerr << "ERROR! Unable to open camera\n";
        return -1;
    }
 
    //--- GRAB AND WRITE LOOP
    pMOG2 = cv::createBackgroundSubtractorMOG2();

    std::cout << "Start grabbing\nPress any key to terminate\n";
    int frameNum = 0;
    std::time_t t = std::time(NULL);
    std::string showFPS = "fps: 0"; 
    for (;;) {
        // wait for a new frame from camera and store it into 'frame'
        cap.read(frame);

        // check if we succeeded
        if (frame.empty()) {
            std::cerr << "ERROR! blank frame grabbed\n";
            break;
        }
        
        //  calculate and show frame rate
        pMOG2->apply(frame, fgMaskMOG2);

        if (difftime(std::time(NULL), t) >= 1) {
            showFPS = "fps: " + std::to_string(frameNum);
            frameNum = 0;
            t = std::time(NULL);
        }
        overlay_text(frame, showFPS);

        // show live and wait for a key with timeout long enough to show images
        cv::imshow("Live", frame);
        cv::imshow("Live", fgMaskMOG2);

        if (cv::waitKey(30) >= 0)
            break;

        frameNum++;
    }
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}